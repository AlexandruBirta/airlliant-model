package ro.unibuc.fmi.airlliantmodel.entity;


import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import org.hibernate.Hibernate;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.validation.annotation.Validated;
import ro.unibuc.fmi.airlliantmodel.dto.Seats;

import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;


@Schema
@Validated
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString
@Entity
public class Flight {

    @Schema(description = "ID autogenerated by database.")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    @EqualsAndHashCode.Exclude
    private Long id;

    @Schema(required = true)
    @NotNull(message = "ToAirport must not be null.")
    @Size(min = 3, max = 3)
    private String toAirport;

    @Schema(required = true)
    @NotNull(message = "ToCountry must not be null.")
    @Size(min = 1, max = 50)
    private String toCountry;

    @Schema(required = true)
    @NotNull(message = "FromAirport must not be null.")
    @Size(min = 3, max = 3)
    private String fromAirport;

    @Schema(required = true)
    @NotNull(message = "FromCountry must not be null.")
    @Size(min = 1, max = 50)
    private String fromCountry;

    @Schema(required = true)
    @NotNull(message = "Flight company must not be null.")
    @Size(min = 1, max = 50)
    private String flightCompany;

    @Schema(required = true, description = "Flight number representing toAirport and fromAirport concatenated with the id of the flight.")
    @NotNull(message = "Flight number must not be null.")
    @Size(min = 7)
    private String flightNumber;

    @Schema(required = true)
    @NotNull(message = "Departure date must not be null.")
    @Column(name = "departure", nullable = false)
    private LocalDateTime departureDate;

    @Schema(required = true)
    @NotNull(message = "Arrival date must not be null.")
    @Column(name = "arrival", nullable = false)
    private LocalDateTime arrivalDate;

    @Schema(required = true)
    @NotNull(message = "Round trip must not be null.")
    @Column(columnDefinition = "boolean default false")
    private Boolean roundTrip;

    @Schema(required = true)
    @NotNull(message = "Price must not be null.")
    @DecimalMin(value = "1.00", message = "Balance value must be higher or equal than 1.00.")
    private BigDecimal price;

    @Schema(required = true)
    @NotNull(message = "Seats must not be null.")
    @Valid
    @Type(type = "jsonb")
    @Column(columnDefinition = "jsonb")
    private Seats seats;

    @Schema(description = "Autogenerated ISO8601 timestamp upon creation.")
    @CreationTimestamp
    @Column(updatable = false)
    private LocalDateTime insertedDate;

    @Schema(description = "Autogenerated ISO8601 timestamp upon update.")
    @UpdateTimestamp
    private LocalDateTime updatedDate;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Flight that = (Flight) o;
        return id != null && Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }

}
